<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<section xmlns="http://docbook.org/ns/docbook" version="5.0" xmlns:xlink="http://www.w3.org/1999/xlink" xml:id="__render_data_obj_v_8cs_source" xml:lang="en-US">
<title>RenderDataObjV.cs</title>
<indexterm><primary>Elin/RenderDataObjV.cs</primary></indexterm>
<programlisting linenumbering="unnumbered"><anchor xml:id="__render_data_obj_v_8cs_source_1l00001"/>00001 <emphasis role="keyword">using&#32;</emphasis>System;
<anchor xml:id="__render_data_obj_v_8cs_source_1l00002"/>00002 <emphasis role="keyword">using&#32;</emphasis>UnityEngine;
<anchor xml:id="__render_data_obj_v_8cs_source_1l00003"/>00003 
<anchor xml:id="__render_data_obj_v_8cs_source_1l00004"/>00004 <emphasis role="comment">//&#32;Token:&#32;0x020001A1&#32;RID:&#32;417</emphasis>
<anchor xml:id="__render_data_obj_v_8cs_source_1l00005"/><link linkend="_class_render_data_obj_v">00005</link> <emphasis role="keyword">public</emphasis>&#32;<emphasis role="keyword">class&#32;</emphasis><link linkend="_class_render_data_obj_v">RenderDataObjV</link>&#32;:&#32;<link linkend="_class_render_data_obj">RenderDataObj</link>
<anchor xml:id="__render_data_obj_v_8cs_source_1l00006"/>00006 {
<anchor xml:id="__render_data_obj_v_8cs_source_1l00007"/>00007 &#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;Token:&#32;0x170002EF&#32;RID:&#32;751</emphasis>
<anchor xml:id="__render_data_obj_v_8cs_source_1l00008"/>00008 &#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;(get)&#32;Token:&#32;0x06000BF1&#32;RID:&#32;3057&#32;RVA:&#32;0x00049EFB&#32;File&#32;Offset:&#32;0x000480FB</emphasis>
<anchor xml:id="__render_data_obj_v_8cs_source_1l00009"/>00009 &#32;&#32;&#32;&#32;<emphasis role="keyword">public</emphasis>&#32;<emphasis role="keyword">override</emphasis>&#32;<emphasis role="keywordtype">bool</emphasis>&#32;ForceAltHeldPosition
<anchor xml:id="__render_data_obj_v_8cs_source_1l00010"/>00010 &#32;&#32;&#32;&#32;{
<anchor xml:id="__render_data_obj_v_8cs_source_1l00011"/>00011 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">get</emphasis>
<anchor xml:id="__render_data_obj_v_8cs_source_1l00012"/>00012 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
<anchor xml:id="__render_data_obj_v_8cs_source_1l00013"/>00013 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<emphasis role="keyword">true</emphasis>;
<anchor xml:id="__render_data_obj_v_8cs_source_1l00014"/>00014 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
<anchor xml:id="__render_data_obj_v_8cs_source_1l00015"/>00015 &#32;&#32;&#32;&#32;}
<anchor xml:id="__render_data_obj_v_8cs_source_1l00016"/>00016 
<anchor xml:id="__render_data_obj_v_8cs_source_1l00017"/>00017 &#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;Token:&#32;0x06000BF2&#32;RID:&#32;3058&#32;RVA:&#32;0x00049F00&#32;File&#32;Offset:&#32;0x00048100</emphasis>
<anchor xml:id="__render_data_obj_v_8cs_source_1l00018"/>00018 &#32;&#32;&#32;&#32;<emphasis role="keyword">public</emphasis>&#32;<emphasis role="keyword">override</emphasis>&#32;<emphasis role="keywordtype">void</emphasis>&#32;Draw(<link linkend="_class_render_param">RenderParam</link>&#32;p)
<anchor xml:id="__render_data_obj_v_8cs_source_1l00019"/>00019 &#32;&#32;&#32;&#32;{
<anchor xml:id="__render_data_obj_v_8cs_source_1l00020"/>00020 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">bool</emphasis>&#32;flag&#32;=&#32;<emphasis role="keyword">false</emphasis>;
<anchor xml:id="__render_data_obj_v_8cs_source_1l00021"/>00021 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_class_mesh_pass">MeshPass</link>&#32;meshPass&#32;=&#32;(this.hasSubPass&#32;&amp;&amp;&#32;<link linkend="_class_sub_pass_data">SubPassData</link>.Current.enable)&#32;?&#32;this.pass.subPass&#32;:&#32;this.pass;
<anchor xml:id="__render_data_obj_v_8cs_source_1l00022"/>00022 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_class_mesh_batch">MeshBatch</link>&#32;meshBatch&#32;=&#32;meshPass.batches[meshPass.batchIdx];
<anchor xml:id="__render_data_obj_v_8cs_source_1l00023"/>00023 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">int</emphasis>&#32;num&#32;=&#32;(p.tile&#32;&gt;&#32;0f)&#32;?&#32;1&#32;:&#32;-1;
<anchor xml:id="__render_data_obj_v_8cs_source_1l00024"/>00024 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(meshPass&#32;==&#32;this.pass.subPass)
<anchor xml:id="__render_data_obj_v_8cs_source_1l00025"/>00025 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
<anchor xml:id="__render_data_obj_v_8cs_source_1l00026"/>00026 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;meshBatch.colors[meshPass.idx]&#32;=&#32;p.color&#32;-&#32;1572864f;
<anchor xml:id="__render_data_obj_v_8cs_source_1l00027"/>00027 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;meshBatch.matrices[meshPass.idx].SetTRS(p.NewVector3&#32;+&#32;<emphasis role="keyword">this</emphasis>.offset&#32;+&#32;<link linkend="_class_sub_pass_data">SubPassData</link>.Current.offset,&#32;<link linkend="_class_sub_pass_data">SubPassData</link>.Current.rotation,&#32;<link linkend="_class_sub_pass_data">SubPassData</link>.Current.scale);
<anchor xml:id="__render_data_obj_v_8cs_source_1l00028"/>00028 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
<anchor xml:id="__render_data_obj_v_8cs_source_1l00029"/>00029 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">else</emphasis>
<anchor xml:id="__render_data_obj_v_8cs_source_1l00030"/>00030 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
<anchor xml:id="__render_data_obj_v_8cs_source_1l00031"/>00031 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;meshBatch.colors[meshPass.idx]&#32;=&#32;p.color;
<anchor xml:id="__render_data_obj_v_8cs_source_1l00032"/>00032 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;meshBatch.matrices[meshPass.idx].m03&#32;=&#32;p.x&#32;+&#32;this.offset.x&#32;*&#32;(float)num;
<anchor xml:id="__render_data_obj_v_8cs_source_1l00033"/>00033 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;meshBatch.matrices[meshPass.idx].m13&#32;=&#32;p.y&#32;+&#32;this.offset.y;
<anchor xml:id="__render_data_obj_v_8cs_source_1l00034"/>00034 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;meshBatch.matrices[meshPass.idx].m23&#32;=&#32;p.z&#32;+&#32;this.offset.z;
<anchor xml:id="__render_data_obj_v_8cs_source_1l00035"/>00035 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
<anchor xml:id="__render_data_obj_v_8cs_source_1l00036"/>00036 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;meshBatch.tiles[meshPass.idx]&#32;=&#32;p.tile&#32;+&#32;((this.multiSize&#32;&amp;&amp;&#32;flag)&#32;?&#32;meshPass.pmesh.tiling.x&#32;:&#32;0f)&#32;+&#32;(<emphasis role="keywordtype">float</emphasis>)(p.liquidLv&#32;*&#32;10000&#32;*&#32;num);
<anchor xml:id="__render_data_obj_v_8cs_source_1l00037"/>00037 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;meshBatch.matColors[meshPass.idx]&#32;=&#32;p.matColor;
<anchor xml:id="__render_data_obj_v_8cs_source_1l00038"/>00038 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;meshPass.idx++;
<anchor xml:id="__render_data_obj_v_8cs_source_1l00039"/>00039 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(meshPass.idx&#32;==&#32;meshPass.batchSize)
<anchor xml:id="__render_data_obj_v_8cs_source_1l00040"/>00040 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
<anchor xml:id="__render_data_obj_v_8cs_source_1l00041"/>00041 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;meshPass.NextBatch();
<anchor xml:id="__render_data_obj_v_8cs_source_1l00042"/>00042 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;meshBatch&#32;=&#32;meshPass.batches[meshPass.batchIdx];
<anchor xml:id="__render_data_obj_v_8cs_source_1l00043"/>00043 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
<anchor xml:id="__render_data_obj_v_8cs_source_1l00044"/>00044 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(this.multiSize&#32;&amp;&amp;&#32;!flag)
<anchor xml:id="__render_data_obj_v_8cs_source_1l00045"/>00045 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
<anchor xml:id="__render_data_obj_v_8cs_source_1l00046"/>00046 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;meshBatch.tiles[meshPass.idx]&#32;=&#32;p.tile&#32;-&#32;meshPass.pmesh.tiling.x&#32;*&#32;(float)num;
<anchor xml:id="__render_data_obj_v_8cs_source_1l00047"/>00047 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;meshBatch.matColors[meshPass.idx]&#32;=&#32;p.matColor;
<anchor xml:id="__render_data_obj_v_8cs_source_1l00048"/>00048 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(meshPass&#32;==&#32;this.pass.subPass)
<anchor xml:id="__render_data_obj_v_8cs_source_1l00049"/>00049 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
<anchor xml:id="__render_data_obj_v_8cs_source_1l00050"/>00050 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;meshBatch.colors[meshPass.idx]&#32;=&#32;p.color&#32;-&#32;1572864f;
<anchor xml:id="__render_data_obj_v_8cs_source_1l00051"/>00051 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;meshBatch.matrices[meshPass.idx].SetTRS(p.NewVector3&#32;+&#32;<emphasis role="keyword">this</emphasis>.offset&#32;+&#32;<emphasis role="keyword">new</emphasis>&#32;Vector3(0f,&#32;meshPass.pmesh.size.y&#32;*&#32;<link linkend="_class_sub_pass_data">SubPassData</link>.Current.scale.y,&#32;0f)&#32;+&#32;<link linkend="_class_sub_pass_data">SubPassData</link>.Current.offset,&#32;<link linkend="_class_sub_pass_data">SubPassData</link>.Current.rotation,&#32;<link linkend="_class_sub_pass_data">SubPassData</link>.Current.scale);
<anchor xml:id="__render_data_obj_v_8cs_source_1l00052"/>00052 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
<anchor xml:id="__render_data_obj_v_8cs_source_1l00053"/>00053 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">else</emphasis>
<anchor xml:id="__render_data_obj_v_8cs_source_1l00054"/>00054 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
<anchor xml:id="__render_data_obj_v_8cs_source_1l00055"/>00055 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;meshBatch.colors[meshPass.idx]&#32;=&#32;p.color;
<anchor xml:id="__render_data_obj_v_8cs_source_1l00056"/>00056 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;meshBatch.matrices[meshPass.idx].m03&#32;=&#32;p.x&#32;+&#32;this.offset.x&#32;*&#32;(float)num;
<anchor xml:id="__render_data_obj_v_8cs_source_1l00057"/>00057 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;meshBatch.matrices[meshPass.idx].m13&#32;=&#32;p.y&#32;+&#32;this.offset.y&#32;+&#32;meshPass.pmesh.size.y;
<anchor xml:id="__render_data_obj_v_8cs_source_1l00058"/>00058 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;meshBatch.matrices[meshPass.idx].m23&#32;=&#32;p.z&#32;+&#32;this.offset.z&#32;+&#32;<link linkend="_class_render_data">RenderData</link>.renderSetting.vFix.z;
<anchor xml:id="__render_data_obj_v_8cs_source_1l00059"/>00059 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
<anchor xml:id="__render_data_obj_v_8cs_source_1l00060"/>00060 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;meshPass.idx++;
<anchor xml:id="__render_data_obj_v_8cs_source_1l00061"/>00061 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(meshPass.idx&#32;==&#32;meshPass.batchSize)
<anchor xml:id="__render_data_obj_v_8cs_source_1l00062"/>00062 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
<anchor xml:id="__render_data_obj_v_8cs_source_1l00063"/>00063 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;meshPass.NextBatch();
<anchor xml:id="__render_data_obj_v_8cs_source_1l00064"/>00064 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
<anchor xml:id="__render_data_obj_v_8cs_source_1l00065"/>00065 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
<anchor xml:id="__render_data_obj_v_8cs_source_1l00066"/>00066 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(this.hasSnowPass&#32;&amp;&amp;&#32;p.snow&#32;&amp;&amp;&#32;meshPass&#32;==&#32;<emphasis role="keyword">this</emphasis>.pass)
<anchor xml:id="__render_data_obj_v_8cs_source_1l00067"/>00067 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
<anchor xml:id="__render_data_obj_v_8cs_source_1l00068"/>00068 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;meshPass&#32;=&#32;this.pass.snowPass;
<anchor xml:id="__render_data_obj_v_8cs_source_1l00069"/>00069 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;meshBatch&#32;=&#32;meshPass.batches[meshPass.batchIdx];
<anchor xml:id="__render_data_obj_v_8cs_source_1l00070"/>00070 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;meshBatch.colors[meshPass.idx]&#32;=&#32;p.color;
<anchor xml:id="__render_data_obj_v_8cs_source_1l00071"/>00071 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;meshBatch.matrices[meshPass.idx].m03&#32;=&#32;p.x&#32;+&#32;this.offset.x&#32;*&#32;(float)num;
<anchor xml:id="__render_data_obj_v_8cs_source_1l00072"/>00072 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;meshBatch.matrices[meshPass.idx].m13&#32;=&#32;p.y&#32;+&#32;this.offset.y;
<anchor xml:id="__render_data_obj_v_8cs_source_1l00073"/>00073 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;meshBatch.matrices[meshPass.idx].m23&#32;=&#32;p.z&#32;+&#32;this.offset.z&#32;+&#32;this.snowZ;
<anchor xml:id="__render_data_obj_v_8cs_source_1l00074"/>00074 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;meshBatch.tiles[meshPass.idx]&#32;=&#32;p.tile&#32;+&#32;((this.multiSize&#32;&amp;&amp;&#32;flag)&#32;?&#32;meshPass.pmesh.tiling.x&#32;:&#32;0f)&#32;+&#32;(<emphasis role="keywordtype">float</emphasis>)(p.liquidLv&#32;*&#32;10000&#32;*&#32;num);
<anchor xml:id="__render_data_obj_v_8cs_source_1l00075"/>00075 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;meshBatch.matColors[meshPass.idx]&#32;=&#32;104025f;
<anchor xml:id="__render_data_obj_v_8cs_source_1l00076"/>00076 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;meshPass.idx++;
<anchor xml:id="__render_data_obj_v_8cs_source_1l00077"/>00077 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(meshPass.idx&#32;==&#32;meshPass.batchSize)
<anchor xml:id="__render_data_obj_v_8cs_source_1l00078"/>00078 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
<anchor xml:id="__render_data_obj_v_8cs_source_1l00079"/>00079 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;meshPass.NextBatch();
<anchor xml:id="__render_data_obj_v_8cs_source_1l00080"/>00080 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;meshBatch&#32;=&#32;meshPass.batches[meshPass.batchIdx];
<anchor xml:id="__render_data_obj_v_8cs_source_1l00081"/>00081 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
<anchor xml:id="__render_data_obj_v_8cs_source_1l00082"/>00082 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(this.multiSize&#32;&amp;&amp;&#32;!flag)
<anchor xml:id="__render_data_obj_v_8cs_source_1l00083"/>00083 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
<anchor xml:id="__render_data_obj_v_8cs_source_1l00084"/>00084 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;meshBatch.tiles[meshPass.idx]&#32;=&#32;p.tile&#32;-&#32;meshPass.pmesh.tiling.x&#32;*&#32;(float)num;
<anchor xml:id="__render_data_obj_v_8cs_source_1l00085"/>00085 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;meshBatch.matColors[meshPass.idx]&#32;=&#32;104025f;
<anchor xml:id="__render_data_obj_v_8cs_source_1l00086"/>00086 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;meshBatch.colors[meshPass.idx]&#32;=&#32;p.color;
<anchor xml:id="__render_data_obj_v_8cs_source_1l00087"/>00087 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;meshBatch.matrices[meshPass.idx].m03&#32;=&#32;p.x&#32;+&#32;this.offset.x&#32;*&#32;(float)num;
<anchor xml:id="__render_data_obj_v_8cs_source_1l00088"/>00088 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;meshBatch.matrices[meshPass.idx].m13&#32;=&#32;p.y&#32;+&#32;this.offset.y&#32;+&#32;meshPass.pmesh.size.y;
<anchor xml:id="__render_data_obj_v_8cs_source_1l00089"/>00089 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;meshBatch.matrices[meshPass.idx].m23&#32;=&#32;p.z&#32;+&#32;this.offset.z&#32;+&#32;RenderData.renderSetting.vFix.z&#32;+&#32;this.snowZ;
<anchor xml:id="__render_data_obj_v_8cs_source_1l00090"/>00090 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;meshPass.idx++;
<anchor xml:id="__render_data_obj_v_8cs_source_1l00091"/>00091 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(meshPass.idx&#32;==&#32;meshPass.batchSize)
<anchor xml:id="__render_data_obj_v_8cs_source_1l00092"/>00092 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
<anchor xml:id="__render_data_obj_v_8cs_source_1l00093"/>00093 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;meshPass.NextBatch();
<anchor xml:id="__render_data_obj_v_8cs_source_1l00094"/>00094 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
<anchor xml:id="__render_data_obj_v_8cs_source_1l00095"/>00095 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
<anchor xml:id="__render_data_obj_v_8cs_source_1l00096"/>00096 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
<anchor xml:id="__render_data_obj_v_8cs_source_1l00097"/>00097 &#32;&#32;&#32;&#32;}
<anchor xml:id="__render_data_obj_v_8cs_source_1l00098"/>00098 
<anchor xml:id="__render_data_obj_v_8cs_source_1l00099"/>00099 &#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;Token:&#32;0x06000BF3&#32;RID:&#32;3059&#32;RVA:&#32;0x0004A545&#32;File&#32;Offset:&#32;0x00048745</emphasis>
<anchor xml:id="__render_data_obj_v_8cs_source_1l00100"/>00100 &#32;&#32;&#32;&#32;<emphasis role="keyword">private</emphasis>&#32;<emphasis role="keywordtype">void</emphasis>&#32;OnValidate()
<anchor xml:id="__render_data_obj_v_8cs_source_1l00101"/>00101 &#32;&#32;&#32;&#32;{
<anchor xml:id="__render_data_obj_v_8cs_source_1l00102"/>00102 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;this._offset&#32;=&#32;this.offset;
<anchor xml:id="__render_data_obj_v_8cs_source_1l00103"/>00103 &#32;&#32;&#32;&#32;}
<anchor xml:id="__render_data_obj_v_8cs_source_1l00104"/>00104 
<anchor xml:id="__render_data_obj_v_8cs_source_1l00105"/>00105 &#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;Token:&#32;0x04000AE1&#32;RID:&#32;2785</emphasis>
<anchor xml:id="__render_data_obj_v_8cs_source_1l00106"/>00106 &#32;&#32;&#32;&#32;<emphasis role="keyword">public</emphasis>&#32;<emphasis role="keywordtype">bool</emphasis>&#32;topOnly;
<anchor xml:id="__render_data_obj_v_8cs_source_1l00107"/>00107 }
</programlisting></section>
