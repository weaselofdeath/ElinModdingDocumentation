<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<section xmlns="http://docbook.org/ns/docbook" version="5.0" xmlns:xlink="http://www.w3.org/1999/xlink" xml:id="__path_manager_8cs_source" xml:lang="en-US">
<title>PathManager.cs</title>
<indexterm><primary>Elin/PathManager.cs</primary></indexterm>
<programlisting linenumbering="unnumbered"><anchor xml:id="__path_manager_8cs_source_1l00001"/>00001 <emphasis role="keyword">using&#32;</emphasis>System;
<anchor xml:id="__path_manager_8cs_source_1l00002"/>00002 <emphasis role="keyword">using&#32;</emphasis>System.Collections.Generic;
<anchor xml:id="__path_manager_8cs_source_1l00003"/>00003 <emphasis role="keyword">using&#32;</emphasis>System.Threading;
<anchor xml:id="__path_manager_8cs_source_1l00004"/>00004 <emphasis role="keyword">using&#32;</emphasis><link linkend="_namespace_algorithms">Algorithms</link>;
<anchor xml:id="__path_manager_8cs_source_1l00005"/>00005 <emphasis role="keyword">using&#32;</emphasis>UnityEngine;
<anchor xml:id="__path_manager_8cs_source_1l00006"/>00006 
<anchor xml:id="__path_manager_8cs_source_1l00007"/>00007 <emphasis role="comment">//&#32;Token:&#32;0x020000B9&#32;RID:&#32;185</emphasis>
<anchor xml:id="__path_manager_8cs_source_1l00008"/><link linkend="_class_path_manager">00008</link> <emphasis role="keyword">public</emphasis>&#32;<emphasis role="keyword">class&#32;</emphasis><link linkend="_class_path_manager">PathManager</link>&#32;:&#32;MonoBehaviour
<anchor xml:id="__path_manager_8cs_source_1l00009"/>00009 {
<anchor xml:id="__path_manager_8cs_source_1l00010"/>00010 &#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;Token:&#32;0x1700010A&#32;RID:&#32;266</emphasis>
<anchor xml:id="__path_manager_8cs_source_1l00011"/>00011 &#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;(get)&#32;Token:&#32;0x060004D9&#32;RID:&#32;1241&#32;RVA:&#32;0x00022099&#32;File&#32;Offset:&#32;0x00020299</emphasis>
<anchor xml:id="__path_manager_8cs_source_1l00012"/>00012 &#32;&#32;&#32;&#32;<emphasis role="keyword">public</emphasis>&#32;<link linkend="_interface_i_pathfinder">IPathfinder</link>&#32;pathfinder
<anchor xml:id="__path_manager_8cs_source_1l00013"/>00013 &#32;&#32;&#32;&#32;{
<anchor xml:id="__path_manager_8cs_source_1l00014"/>00014 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">get</emphasis>
<anchor xml:id="__path_manager_8cs_source_1l00015"/>00015 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
<anchor xml:id="__path_manager_8cs_source_1l00016"/>00016 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;this._pathfinder;
<anchor xml:id="__path_manager_8cs_source_1l00017"/>00017 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
<anchor xml:id="__path_manager_8cs_source_1l00018"/>00018 &#32;&#32;&#32;&#32;}
<anchor xml:id="__path_manager_8cs_source_1l00019"/>00019 
<anchor xml:id="__path_manager_8cs_source_1l00020"/>00020 &#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;Token:&#32;0x060004DA&#32;RID:&#32;1242&#32;RVA:&#32;0x000220A1&#32;File&#32;Offset:&#32;0x000202A1</emphasis>
<anchor xml:id="__path_manager_8cs_source_1l00021"/>00021 &#32;&#32;&#32;&#32;<emphasis role="keyword">private</emphasis>&#32;<emphasis role="keywordtype">void</emphasis>&#32;Awake()
<anchor xml:id="__path_manager_8cs_source_1l00022"/>00022 &#32;&#32;&#32;&#32;{
<anchor xml:id="__path_manager_8cs_source_1l00023"/>00023 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;PathManager.Instance&#32;=&#32;<emphasis role="keyword">this</emphasis>;
<anchor xml:id="__path_manager_8cs_source_1l00024"/>00024 &#32;&#32;&#32;&#32;}
<anchor xml:id="__path_manager_8cs_source_1l00025"/>00025 
<anchor xml:id="__path_manager_8cs_source_1l00026"/>00026 &#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;Token:&#32;0x060004DB&#32;RID:&#32;1243&#32;RVA:&#32;0x000220A9&#32;File&#32;Offset:&#32;0x000202A9</emphasis>
<anchor xml:id="__path_manager_8cs_source_1l00027"/>00027 &#32;&#32;&#32;&#32;<emphasis role="keyword">public</emphasis>&#32;<emphasis role="keywordtype">void</emphasis>&#32;RequestPath(<link linkend="_class_path_progress">PathProgress</link>&#32;progress)
<anchor xml:id="__path_manager_8cs_source_1l00028"/>00028 &#32;&#32;&#32;&#32;{
<anchor xml:id="__path_manager_8cs_source_1l00029"/>00029 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_class_path_manager">PathManager</link>.requestCount++;
<anchor xml:id="__path_manager_8cs_source_1l00030"/>00030 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;progress.state&#32;=&#32;<link linkend="_class_path_progress">PathProgress</link>.State.Searching;
<anchor xml:id="__path_manager_8cs_source_1l00031"/>00031 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;ThreadPool.QueueUserWorkItem(delegate(<emphasis role="keywordtype">object</emphasis>&#32;a)
<anchor xml:id="__path_manager_8cs_source_1l00032"/>00032 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
<anchor xml:id="__path_manager_8cs_source_1l00033"/>00033 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">new</emphasis>&#32;<link linkend="_class_path_thread">PathThread</link>().Start(progress);
<anchor xml:id="__path_manager_8cs_source_1l00034"/>00034 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;});
<anchor xml:id="__path_manager_8cs_source_1l00035"/>00035 &#32;&#32;&#32;&#32;}
<anchor xml:id="__path_manager_8cs_source_1l00036"/>00036 
<anchor xml:id="__path_manager_8cs_source_1l00037"/>00037 &#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;Token:&#32;0x060004DC&#32;RID:&#32;1244&#32;RVA:&#32;0x000220E0&#32;File&#32;Offset:&#32;0x000202E0</emphasis>
<anchor xml:id="__path_manager_8cs_source_1l00038"/>00038 &#32;&#32;&#32;&#32;<emphasis role="keyword">public</emphasis>&#32;<emphasis role="keywordtype">void</emphasis>&#32;RequestPathImmediate(<link linkend="_class_path_progress">PathProgress</link>&#32;progress)
<anchor xml:id="__path_manager_8cs_source_1l00039"/>00039 &#32;&#32;&#32;&#32;{
<anchor xml:id="__path_manager_8cs_source_1l00040"/>00040 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_class_path_manager">PathManager</link>.requestCount++;
<anchor xml:id="__path_manager_8cs_source_1l00041"/>00041 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;this.pathfinder.FindPath(progress);
<anchor xml:id="__path_manager_8cs_source_1l00042"/>00042 &#32;&#32;&#32;&#32;}
<anchor xml:id="__path_manager_8cs_source_1l00043"/>00043 
<anchor xml:id="__path_manager_8cs_source_1l00044"/>00044 &#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;Token:&#32;0x060004DD&#32;RID:&#32;1245&#32;RVA:&#32;0x000220FC&#32;File&#32;Offset:&#32;0x000202FC</emphasis>
<anchor xml:id="__path_manager_8cs_source_1l00045"/>00045 &#32;&#32;&#32;&#32;<emphasis role="keyword">public</emphasis>&#32;<emphasis role="keywordtype">bool</emphasis>&#32;IsPathClear(<link linkend="_class_point">Point</link>&#32;origin,&#32;<link linkend="_class_point">Point</link>&#32;dest,&#32;<link linkend="_interface_i_pathfind_walker">IPathfindWalker</link>&#32;walker,&#32;<emphasis role="keywordtype">int</emphasis>&#32;radius)
<anchor xml:id="__path_manager_8cs_source_1l00046"/>00046 &#32;&#32;&#32;&#32;{
<anchor xml:id="__path_manager_8cs_source_1l00047"/>00047 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;PathManager.tempProgress.walker&#32;=&#32;walker;
<anchor xml:id="__path_manager_8cs_source_1l00048"/>00048 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;PathManager.tempProgress.moveType&#32;=&#32;<link linkend="_class_path_manager">PathManager</link>.MoveType.Default;
<anchor xml:id="__path_manager_8cs_source_1l00049"/>00049 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_class_path_manager">PathManager</link>.tempProgress.RequestPathImmediate(origin,&#32;dest,&#32;0,&#32;<emphasis role="keyword">false</emphasis>,&#32;-1);
<anchor xml:id="__path_manager_8cs_source_1l00050"/>00050 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;PathManager.tempProgress.nodes.Count&#32;&gt;&#32;0&#32;&amp;&amp;&#32;PathManager.tempProgress.nodes.Count&#32;&lt;&#32;radius;
<anchor xml:id="__path_manager_8cs_source_1l00051"/>00051 &#32;&#32;&#32;&#32;}
<anchor xml:id="__path_manager_8cs_source_1l00052"/>00052 
<anchor xml:id="__path_manager_8cs_source_1l00053"/>00053 &#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;Token:&#32;0x060004DE&#32;RID:&#32;1246&#32;RVA:&#32;0x00022155&#32;File&#32;Offset:&#32;0x00020355</emphasis>
<anchor xml:id="__path_manager_8cs_source_1l00054"/>00054 &#32;&#32;&#32;&#32;<emphasis role="keyword">public</emphasis>&#32;<link linkend="_class_path_progress">PathProgress</link>&#32;RequestPathImmediate(<link linkend="_class_point">Point</link>&#32;origin,&#32;<link linkend="_class_point">Point</link>&#32;dest,&#32;<link linkend="_interface_i_pathfind_walker">IPathfindWalker</link>&#32;walker,&#32;<link linkend="_class_path_manager">PathManager</link>.MoveType&#32;moveType&#32;=&#32;<link linkend="_class_path_manager">PathManager</link>.MoveType.Default,&#32;<emphasis role="keywordtype">int</emphasis>&#32;searchLimit&#32;=&#32;-1,&#32;<emphasis role="keywordtype">int</emphasis>&#32;destDist&#32;=&#32;0)
<anchor xml:id="__path_manager_8cs_source_1l00055"/>00055 &#32;&#32;&#32;&#32;{
<anchor xml:id="__path_manager_8cs_source_1l00056"/>00056 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;PathManager.tempProgress.walker&#32;=&#32;walker;
<anchor xml:id="__path_manager_8cs_source_1l00057"/>00057 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;PathManager.tempProgress.moveType&#32;=&#32;moveType;
<anchor xml:id="__path_manager_8cs_source_1l00058"/>00058 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_class_path_manager">PathManager</link>.tempProgress.RequestPathImmediate(origin,&#32;dest,&#32;destDist,&#32;<emphasis role="keyword">false</emphasis>,&#32;searchLimit);
<anchor xml:id="__path_manager_8cs_source_1l00059"/>00059 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<link linkend="_class_path_manager">PathManager</link>.tempProgress;
<anchor xml:id="__path_manager_8cs_source_1l00060"/>00060 &#32;&#32;&#32;&#32;}
<anchor xml:id="__path_manager_8cs_source_1l00061"/>00061 
<anchor xml:id="__path_manager_8cs_source_1l00062"/>00062 &#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;Token:&#32;0x060004DF&#32;RID:&#32;1247&#32;RVA:&#32;0x00022184&#32;File&#32;Offset:&#32;0x00020384</emphasis>
<anchor xml:id="__path_manager_8cs_source_1l00063"/>00063 &#32;&#32;&#32;&#32;<emphasis role="keyword">public</emphasis>&#32;<link linkend="_class_point">Point</link>&#32;GetFirstStep(<link linkend="_class_point">Point</link>&#32;origin,&#32;<link linkend="_class_point">Point</link>&#32;_dest,&#32;<link linkend="_interface_i_pathfind_walker">IPathfindWalker</link>&#32;walker,&#32;<emphasis role="keywordtype">int</emphasis>&#32;maxDist&#32;=&#32;20,&#32;<link linkend="_class_path_manager">PathManager</link>.MoveType&#32;moveType&#32;=&#32;<link linkend="_class_path_manager">PathManager</link>.MoveType.Default)
<anchor xml:id="__path_manager_8cs_source_1l00064"/>00064 &#32;&#32;&#32;&#32;{
<anchor xml:id="__path_manager_8cs_source_1l00065"/>00065 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_class_point">Point</link>&#32;dest&#32;=&#32;_dest.Copy();
<anchor xml:id="__path_manager_8cs_source_1l00066"/>00066 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_class_point">Point</link>&#32;point&#32;=&#32;this._GetFirstStep(origin,&#32;dest,&#32;walker,&#32;maxDist,&#32;moveType);
<anchor xml:id="__path_manager_8cs_source_1l00067"/>00067 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(point.IsValid)
<anchor xml:id="__path_manager_8cs_source_1l00068"/>00068 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
<anchor xml:id="__path_manager_8cs_source_1l00069"/>00069 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;point;
<anchor xml:id="__path_manager_8cs_source_1l00070"/>00070 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
<anchor xml:id="__path_manager_8cs_source_1l00071"/>00071 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<link linkend="_class_point">Point</link>.Invalid;
<anchor xml:id="__path_manager_8cs_source_1l00072"/>00072 &#32;&#32;&#32;&#32;}
<anchor xml:id="__path_manager_8cs_source_1l00073"/>00073 
<anchor xml:id="__path_manager_8cs_source_1l00074"/>00074 &#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;Token:&#32;0x060004E0&#32;RID:&#32;1248&#32;RVA:&#32;0x000221B8&#32;File&#32;Offset:&#32;0x000203B8</emphasis>
<anchor xml:id="__path_manager_8cs_source_1l00075"/>00075 &#32;&#32;&#32;&#32;<emphasis role="keyword">public</emphasis>&#32;<link linkend="_class_point">Point</link>&#32;_GetFirstStep(<link linkend="_class_point">Point</link>&#32;origin,&#32;<link linkend="_class_point">Point</link>&#32;dest,&#32;<link linkend="_interface_i_pathfind_walker">IPathfindWalker</link>&#32;walker,&#32;<emphasis role="keywordtype">int</emphasis>&#32;maxDist&#32;=&#32;20,&#32;<link linkend="_class_path_manager">PathManager</link>.MoveType&#32;moveType&#32;=&#32;<link linkend="_class_path_manager">PathManager</link>.MoveType.Default)
<anchor xml:id="__path_manager_8cs_source_1l00076"/>00076 &#32;&#32;&#32;&#32;{
<anchor xml:id="__path_manager_8cs_source_1l00077"/>00077 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(!dest.IsValid&#32;||&#32;(dest.cell.blocked&#32;&amp;&amp;&#32;origin.Distance(dest)&#32;&lt;=&#32;1))
<anchor xml:id="__path_manager_8cs_source_1l00078"/>00078 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
<anchor xml:id="__path_manager_8cs_source_1l00079"/>00079 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<link linkend="_class_point">Point</link>.Invalid;
<anchor xml:id="__path_manager_8cs_source_1l00080"/>00080 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
<anchor xml:id="__path_manager_8cs_source_1l00081"/>00081 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;PathManager.tempProgress.walker&#32;=&#32;walker;
<anchor xml:id="__path_manager_8cs_source_1l00082"/>00082 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;PathManager.tempProgress.moveType&#32;=&#32;moveType;
<anchor xml:id="__path_manager_8cs_source_1l00083"/>00083 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_class_path_manager">PathManager</link>.tempProgress.RequestPathImmediate(origin,&#32;dest,&#32;(moveType&#32;==&#32;<link linkend="_class_path_manager">PathManager</link>.MoveType.Combat)&#32;?&#32;1&#32;:&#32;0,&#32;<emphasis role="keyword">false</emphasis>,&#32;maxDist);
<anchor xml:id="__path_manager_8cs_source_1l00084"/>00084 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(!<link linkend="_class_path_manager">PathManager</link>.tempProgress.HasPath)
<anchor xml:id="__path_manager_8cs_source_1l00085"/>00085 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
<anchor xml:id="__path_manager_8cs_source_1l00086"/>00086 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<link linkend="_class_point">Point</link>.Invalid;
<anchor xml:id="__path_manager_8cs_source_1l00087"/>00087 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
<anchor xml:id="__path_manager_8cs_source_1l00088"/>00088 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;List&lt;PathFinderNode&gt;&#32;nodes&#32;=&#32;<link linkend="_class_path_manager">PathManager</link>.tempProgress.nodes;
<anchor xml:id="__path_manager_8cs_source_1l00089"/>00089 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(nodes.Count&#32;&lt;=&#32;0)
<anchor xml:id="__path_manager_8cs_source_1l00090"/>00090 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
<anchor xml:id="__path_manager_8cs_source_1l00091"/>00091 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<link linkend="_class_point">Point</link>.Invalid;
<anchor xml:id="__path_manager_8cs_source_1l00092"/>00092 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
<anchor xml:id="__path_manager_8cs_source_1l00093"/>00093 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_struct_algorithms_1_1_path_finder_node">PathFinderNode</link>&#32;pathFinderNode&#32;=&#32;nodes[nodes.Count&#32;-&#32;1];
<anchor xml:id="__path_manager_8cs_source_1l00094"/>00094 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(pathFinderNode.X&#32;==&#32;origin.x&#32;&amp;&amp;&#32;pathFinderNode.Z&#32;==&#32;origin.z&#32;&amp;&amp;&#32;nodes.Count&#32;&gt;&#32;1)
<anchor xml:id="__path_manager_8cs_source_1l00095"/>00095 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
<anchor xml:id="__path_manager_8cs_source_1l00096"/>00096 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;pathFinderNode&#32;=&#32;nodes[nodes.Count&#32;-&#32;2];
<anchor xml:id="__path_manager_8cs_source_1l00097"/>00097 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
<anchor xml:id="__path_manager_8cs_source_1l00098"/>00098 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(Mathf.Abs(pathFinderNode.X&#32;-&#32;origin.x)&#32;&gt;&#32;1&#32;||&#32;Mathf.Abs(pathFinderNode.Z&#32;-&#32;origin.z)&#32;&gt;&#32;1)
<anchor xml:id="__path_manager_8cs_source_1l00099"/>00099 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
<anchor xml:id="__path_manager_8cs_source_1l00100"/>00100 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<link linkend="_class_point">Point</link>.Invalid;
<anchor xml:id="__path_manager_8cs_source_1l00101"/>00101 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
<anchor xml:id="__path_manager_8cs_source_1l00102"/>00102 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_class_point">Point</link>&#32;point&#32;=&#32;<emphasis role="keyword">new</emphasis>&#32;<link linkend="_class_point">Point</link>(pathFinderNode.X,&#32;pathFinderNode.Z);
<anchor xml:id="__path_manager_8cs_source_1l00103"/>00103 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(point.x&#32;==&#32;origin.x&#32;&amp;&amp;&#32;point.z&#32;==&#32;origin.z)
<anchor xml:id="__path_manager_8cs_source_1l00104"/>00104 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
<anchor xml:id="__path_manager_8cs_source_1l00105"/>00105 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<link linkend="_class_point">Point</link>.Invalid;
<anchor xml:id="__path_manager_8cs_source_1l00106"/>00106 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
<anchor xml:id="__path_manager_8cs_source_1l00107"/>00107 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;point;
<anchor xml:id="__path_manager_8cs_source_1l00108"/>00108 &#32;&#32;&#32;&#32;}
<anchor xml:id="__path_manager_8cs_source_1l00109"/>00109 
<anchor xml:id="__path_manager_8cs_source_1l00110"/>00110 &#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;Token:&#32;0x060004E1&#32;RID:&#32;1249&#32;RVA:&#32;0x000222F0&#32;File&#32;Offset:&#32;0x000204F0</emphasis>
<anchor xml:id="__path_manager_8cs_source_1l00111"/>00111 &#32;&#32;&#32;&#32;<emphasis role="keyword">public</emphasis>&#32;<emphasis role="keywordtype">void</emphasis>&#32;OnGridModified()
<anchor xml:id="__path_manager_8cs_source_1l00112"/>00112 &#32;&#32;&#32;&#32;{
<anchor xml:id="__path_manager_8cs_source_1l00113"/>00113 &#32;&#32;&#32;&#32;}
<anchor xml:id="__path_manager_8cs_source_1l00114"/>00114 
<anchor xml:id="__path_manager_8cs_source_1l00115"/>00115 &#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;Token:&#32;0x04000652&#32;RID:&#32;1618</emphasis>
<anchor xml:id="__path_manager_8cs_source_1l00116"/>00116 &#32;&#32;&#32;&#32;<emphasis role="keyword">public</emphasis>&#32;<emphasis role="keyword">static</emphasis>&#32;<emphasis role="keywordtype">int</emphasis>&#32;requestCount;
<anchor xml:id="__path_manager_8cs_source_1l00117"/>00117 
<anchor xml:id="__path_manager_8cs_source_1l00118"/>00118 &#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;Token:&#32;0x04000653&#32;RID:&#32;1619</emphasis>
<anchor xml:id="__path_manager_8cs_source_1l00119"/>00119 &#32;&#32;&#32;&#32;<emphasis role="keyword">public</emphasis>&#32;<emphasis role="keyword">static</emphasis>&#32;<link linkend="_class_path_manager">PathManager</link>&#32;Instance;
<anchor xml:id="__path_manager_8cs_source_1l00120"/>00120 
<anchor xml:id="__path_manager_8cs_source_1l00121"/>00121 &#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;Token:&#32;0x04000654&#32;RID:&#32;1620</emphasis>
<anchor xml:id="__path_manager_8cs_source_1l00122"/>00122 &#32;&#32;&#32;&#32;<emphasis role="keyword">public</emphasis>&#32;<emphasis role="keyword">static</emphasis>&#32;<link linkend="_class_path_progress">PathProgress</link>&#32;tempProgress&#32;=&#32;<emphasis role="keyword">new</emphasis>&#32;<link linkend="_class_path_progress">PathProgress</link>();
<anchor xml:id="__path_manager_8cs_source_1l00123"/>00123 
<anchor xml:id="__path_manager_8cs_source_1l00124"/>00124 &#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;Token:&#32;0x04000655&#32;RID:&#32;1621</emphasis>
<anchor xml:id="__path_manager_8cs_source_1l00125"/>00125 &#32;&#32;&#32;&#32;<emphasis role="keyword">public</emphasis>&#32;<link linkend="_class_algorithms_1_1_path_finder">PathFinder</link>&#32;_pathfinder;
<anchor xml:id="__path_manager_8cs_source_1l00126"/>00126 
<anchor xml:id="__path_manager_8cs_source_1l00127"/>00127 &#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;Token:&#32;0x04000656&#32;RID:&#32;1622</emphasis>
<anchor xml:id="__path_manager_8cs_source_1l00128"/>00128 &#32;&#32;&#32;&#32;<emphasis role="keyword">public</emphasis>&#32;<emphasis role="keywordtype">int</emphasis>&#32;searchLimit&#32;=&#32;1000000;
<anchor xml:id="__path_manager_8cs_source_1l00129"/>00129 
<anchor xml:id="__path_manager_8cs_source_1l00130"/>00130 &#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;Token:&#32;0x02000806&#32;RID:&#32;2054</emphasis>
<anchor xml:id="__path_manager_8cs_source_1l00131"/>00131 &#32;&#32;&#32;&#32;<emphasis role="keyword">public</emphasis>&#32;<emphasis role="keyword">enum</emphasis>&#32;MoveType
<anchor xml:id="__path_manager_8cs_source_1l00132"/>00132 &#32;&#32;&#32;&#32;{
<anchor xml:id="__path_manager_8cs_source_1l00133"/>00133 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;Token:&#32;0x04002290&#32;RID:&#32;8848</emphasis>
<anchor xml:id="__path_manager_8cs_source_1l00134"/>00134 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;Default,
<anchor xml:id="__path_manager_8cs_source_1l00135"/>00135 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;Token:&#32;0x04002291&#32;RID:&#32;8849</emphasis>
<anchor xml:id="__path_manager_8cs_source_1l00136"/>00136 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;Combat
<anchor xml:id="__path_manager_8cs_source_1l00137"/>00137 &#32;&#32;&#32;&#32;}
<anchor xml:id="__path_manager_8cs_source_1l00138"/>00138 }
</programlisting></section>
