<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<section xmlns="http://docbook.org/ns/docbook" version="5.0" xmlns:xlink="http://www.w3.org/1999/xlink" xml:id="__render_data_obj_8cs_source" xml:lang="en-US">
<title>RenderDataObj.cs</title>
<indexterm><primary>Elin/RenderDataObj.cs</primary></indexterm>
<programlisting linenumbering="unnumbered"><anchor xml:id="__render_data_obj_8cs_source_1l00001"/>00001 <emphasis role="keyword">using&#32;</emphasis>System;
<anchor xml:id="__render_data_obj_8cs_source_1l00002"/>00002 
<anchor xml:id="__render_data_obj_8cs_source_1l00003"/>00003 <emphasis role="comment">//&#32;Token:&#32;0x0200019E&#32;RID:&#32;414</emphasis>
<anchor xml:id="__render_data_obj_8cs_source_1l00004"/><link linkend="_class_render_data_obj">00004</link> <emphasis role="keyword">public</emphasis>&#32;<emphasis role="keyword">class&#32;</emphasis><link linkend="_class_render_data_obj">RenderDataObj</link>&#32;:&#32;<link linkend="_class_render_data_tile">RenderDataTile</link>
<anchor xml:id="__render_data_obj_8cs_source_1l00005"/>00005 {
<anchor xml:id="__render_data_obj_8cs_source_1l00006"/>00006 &#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;Token:&#32;0x06000BE9&#32;RID:&#32;3049&#32;RVA:&#32;0x00049598&#32;File&#32;Offset:&#32;0x00047798</emphasis>
<anchor xml:id="__render_data_obj_8cs_source_1l00007"/>00007 &#32;&#32;&#32;&#32;<emphasis role="keyword">public</emphasis>&#32;<emphasis role="keyword">override</emphasis>&#32;<emphasis role="keywordtype">void</emphasis>&#32;Draw(<link linkend="_class_render_param">RenderParam</link>&#32;p)
<anchor xml:id="__render_data_obj_8cs_source_1l00008"/>00008 &#32;&#32;&#32;&#32;{
<anchor xml:id="__render_data_obj_8cs_source_1l00009"/>00009 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_class_mesh_pass">MeshPass</link>&#32;meshPass&#32;=&#32;(this.hasSubPass&#32;&amp;&amp;&#32;<link linkend="_class_sub_pass_data">SubPassData</link>.Current.enable)&#32;?&#32;this.pass.subPass&#32;:&#32;this.pass;
<anchor xml:id="__render_data_obj_8cs_source_1l00010"/>00010 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_class_mesh_batch">MeshBatch</link>&#32;meshBatch&#32;=&#32;meshPass.batches[meshPass.batchIdx];
<anchor xml:id="__render_data_obj_8cs_source_1l00011"/>00011 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">int</emphasis>&#32;num&#32;=&#32;(p.tile&#32;&gt;&#32;0f)&#32;?&#32;1&#32;:&#32;-1;
<anchor xml:id="__render_data_obj_8cs_source_1l00012"/>00012 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(this.useOffsetBack)
<anchor xml:id="__render_data_obj_8cs_source_1l00013"/>00013 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
<anchor xml:id="__render_data_obj_8cs_source_1l00014"/>00014 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;this._offset&#32;=&#32;((p.dir&#32;==&#32;2&#32;||&#32;p.dir&#32;==&#32;3)&#32;?&#32;this.offsetBack&#32;:&#32;this.offset);
<anchor xml:id="__render_data_obj_8cs_source_1l00015"/>00015 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
<anchor xml:id="__render_data_obj_8cs_source_1l00016"/>00016 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(meshPass&#32;==&#32;this.pass.subPass)
<anchor xml:id="__render_data_obj_8cs_source_1l00017"/>00017 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
<anchor xml:id="__render_data_obj_8cs_source_1l00018"/>00018 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;meshBatch.colors[meshPass.idx]&#32;=&#32;p.color&#32;-&#32;1572864f;
<anchor xml:id="__render_data_obj_8cs_source_1l00019"/>00019 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;meshBatch.matrices[meshPass.idx].SetTRS(p.NewVector3&#32;+&#32;<emphasis role="keyword">this</emphasis>._offset&#32;+&#32;<link linkend="_class_sub_pass_data">SubPassData</link>.Current.offset,&#32;<link linkend="_class_sub_pass_data">SubPassData</link>.Current.rotation,&#32;<link linkend="_class_sub_pass_data">SubPassData</link>.Current.scale);
<anchor xml:id="__render_data_obj_8cs_source_1l00020"/>00020 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
<anchor xml:id="__render_data_obj_8cs_source_1l00021"/>00021 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">else</emphasis>
<anchor xml:id="__render_data_obj_8cs_source_1l00022"/>00022 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
<anchor xml:id="__render_data_obj_8cs_source_1l00023"/>00023 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;meshBatch.colors[meshPass.idx]&#32;=&#32;p.color;
<anchor xml:id="__render_data_obj_8cs_source_1l00024"/>00024 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;meshBatch.matrices[meshPass.idx].m03&#32;=&#32;p.x&#32;+&#32;this._offset.x&#32;*&#32;(float)num;
<anchor xml:id="__render_data_obj_8cs_source_1l00025"/>00025 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;meshBatch.matrices[meshPass.idx].m13&#32;=&#32;p.y&#32;+&#32;this._offset.y;
<anchor xml:id="__render_data_obj_8cs_source_1l00026"/>00026 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;meshBatch.matrices[meshPass.idx].m23&#32;=&#32;p.z&#32;+&#32;this._offset.z;
<anchor xml:id="__render_data_obj_8cs_source_1l00027"/>00027 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
<anchor xml:id="__render_data_obj_8cs_source_1l00028"/>00028 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;meshBatch.tiles[meshPass.idx]&#32;=&#32;p.tile&#32;+&#32;(float)(p.liquidLv&#32;*&#32;10000&#32;*&#32;num);
<anchor xml:id="__render_data_obj_8cs_source_1l00029"/>00029 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;meshBatch.matColors[meshPass.idx]&#32;=&#32;p.matColor;
<anchor xml:id="__render_data_obj_8cs_source_1l00030"/>00030 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;meshPass.idx++;
<anchor xml:id="__render_data_obj_8cs_source_1l00031"/>00031 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(meshPass.idx&#32;==&#32;meshPass.batchSize)
<anchor xml:id="__render_data_obj_8cs_source_1l00032"/>00032 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
<anchor xml:id="__render_data_obj_8cs_source_1l00033"/>00033 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;meshPass.NextBatch();
<anchor xml:id="__render_data_obj_8cs_source_1l00034"/>00034 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
<anchor xml:id="__render_data_obj_8cs_source_1l00035"/>00035 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(p.snow&#32;&amp;&amp;&#32;<emphasis role="keyword">this</emphasis>.hasSnowPass&#32;&amp;&amp;&#32;meshPass&#32;==&#32;<emphasis role="keyword">this</emphasis>.pass)
<anchor xml:id="__render_data_obj_8cs_source_1l00036"/>00036 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
<anchor xml:id="__render_data_obj_8cs_source_1l00037"/>00037 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;meshPass&#32;=&#32;this.pass.snowPass;
<anchor xml:id="__render_data_obj_8cs_source_1l00038"/>00038 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;meshBatch&#32;=&#32;meshPass.batches[meshPass.batchIdx];
<anchor xml:id="__render_data_obj_8cs_source_1l00039"/>00039 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;meshBatch.colors[meshPass.idx]&#32;=&#32;p.color;
<anchor xml:id="__render_data_obj_8cs_source_1l00040"/>00040 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;meshBatch.matrices[meshPass.idx].m03&#32;=&#32;p.x&#32;+&#32;this._offset.x&#32;*&#32;(float)num;
<anchor xml:id="__render_data_obj_8cs_source_1l00041"/>00041 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;meshBatch.matrices[meshPass.idx].m13&#32;=&#32;p.y&#32;+&#32;this._offset.y;
<anchor xml:id="__render_data_obj_8cs_source_1l00042"/>00042 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;meshBatch.matrices[meshPass.idx].m23&#32;=&#32;p.z&#32;+&#32;this._offset.z&#32;+&#32;this.snowZ;
<anchor xml:id="__render_data_obj_8cs_source_1l00043"/>00043 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;meshBatch.tiles[meshPass.idx]&#32;=&#32;p.tile&#32;+&#32;(float)(p.liquidLv&#32;*&#32;10000&#32;*&#32;num);
<anchor xml:id="__render_data_obj_8cs_source_1l00044"/>00044 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;meshBatch.matColors[meshPass.idx]&#32;=&#32;104025f;
<anchor xml:id="__render_data_obj_8cs_source_1l00045"/>00045 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;meshPass.idx++;
<anchor xml:id="__render_data_obj_8cs_source_1l00046"/>00046 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(meshPass.idx&#32;==&#32;meshPass.batchSize)
<anchor xml:id="__render_data_obj_8cs_source_1l00047"/>00047 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
<anchor xml:id="__render_data_obj_8cs_source_1l00048"/>00048 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;meshPass.NextBatch();
<anchor xml:id="__render_data_obj_8cs_source_1l00049"/>00049 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
<anchor xml:id="__render_data_obj_8cs_source_1l00050"/>00050 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
<anchor xml:id="__render_data_obj_8cs_source_1l00051"/>00051 &#32;&#32;&#32;&#32;}
<anchor xml:id="__render_data_obj_8cs_source_1l00052"/>00052 
<anchor xml:id="__render_data_obj_8cs_source_1l00053"/>00053 &#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;Token:&#32;0x06000BEA&#32;RID:&#32;3050&#32;RVA:&#32;0x000498B1&#32;File&#32;Offset:&#32;0x00047AB1</emphasis>
<anchor xml:id="__render_data_obj_8cs_source_1l00054"/>00054 &#32;&#32;&#32;&#32;<emphasis role="keyword">private</emphasis>&#32;<emphasis role="keywordtype">void</emphasis>&#32;OnValidate()
<anchor xml:id="__render_data_obj_8cs_source_1l00055"/>00055 &#32;&#32;&#32;&#32;{
<anchor xml:id="__render_data_obj_8cs_source_1l00056"/>00056 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;this._offset&#32;=&#32;this.offset;
<anchor xml:id="__render_data_obj_8cs_source_1l00057"/>00057 &#32;&#32;&#32;&#32;}
<anchor xml:id="__render_data_obj_8cs_source_1l00058"/>00058 }
</programlisting></section>
